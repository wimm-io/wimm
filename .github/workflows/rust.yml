name: Rust CI with Coverage

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]

env:
  CARGO_TERM_COLOR: always
  # Minimum coverage threshold (percentage)
  MIN_COVERAGE: 60

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Run coverage
        run: |
          cargo tarpaulin --verbose --all-features --workspace --timeout 120 \
            --exclude-files "src/main.rs" \
            --out Xml --out Html --out Json

      - name: Check coverage threshold
        run: |
          COVERAGE=$(cargo tarpaulin --print-summary --exclude-files "src/main.rs" | grep -oP '\d+\.\d+(?=% coverage)' | head -1)
          echo "Current coverage: ${COVERAGE}%"
          echo "Minimum required: ${MIN_COVERAGE}%"

          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "‚ùå Coverage ${COVERAGE}% is below minimum threshold of ${MIN_COVERAGE}%"
            exit 1
          else
            echo "‚úÖ Coverage ${COVERAGE}% meets minimum threshold of ${MIN_COVERAGE}%"
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./lcov.info
        continue-on-error: true

      - name: Archive coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            tarpaulin-report.html
            cobertura.xml
            tarpaulin-report.json

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('tarpaulin-report.json', 'utf8'));
              const coveragePercent = coverage.files ?
                Math.round(coverage.files.reduce((acc, file) => acc + file.coverage, 0) / coverage.files.length * 100) / 100 :
                'N/A';

              const body = `## üìä Coverage Report

              | Metric | Value |
              |--------|-------|
              | **Overall Coverage** | ${coveragePercent}% |
              | **Minimum Required** | ${process.env.MIN_COVERAGE}% |
              | **Status** | ${coveragePercent >= process.env.MIN_COVERAGE ? '‚úÖ Passing' : '‚ùå Below Threshold'} |

              ${coveragePercent < process.env.MIN_COVERAGE ?
                '‚ö†Ô∏è **Warning**: Coverage is below the minimum threshold. Please add more tests.' :
                'üéâ **Great job!** Coverage meets the minimum requirement.'}

              [View detailed coverage report in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Could not post coverage comment:', error);
            }

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Run rustfmt
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust 1.74 (MSRV)
        uses: dtolnay/rust-toolchain@1.74

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-msrv-${{ hashFiles('**/Cargo.lock') }}

      - name: Check MSRV
        run: cargo check --all-targets --all-features
